******* Interface TemporalUnit *******

public interface TemporalUnit

Единица даты и времени, например, дни или часы.
Измерение времени строится на таких единицах, как годы, месяцы, дни, часы,
минуты и секунды. Реализации этого интерфейса представляют эти модули.

Экземпляр этого интерфейса представляет саму единицу, а не ее количество.
----------------------------------------------------------------------------
См. Period для класса, который представляет сумму в терминах общих единиц.
https://docs.oracle.com/javase/8/docs/api/java/time/Period.html
----------------------------------------------------------------------------

Наиболее часто используемые единицы определены в ChronoUnit. Другие блоки
поставляются в IsoFields. Модули также могут быть написаны кодом приложения
путем реализации этого интерфейса.

Интерфейс работает с использованием двойной диспетчеризации. Клиентский код
вызывает методы для даты и времени, такие как LocalDateTime, которые проверяют,
является ли единица измерения ChronoUnit. Если это так, то дата-время должна
обрабатывать это. В противном случае вызов метода повторно направляется
соответствующему методу в этом интерфейсе.

Требования к реализации: Данный интерфейс должен быть реализован с осторожностью,
чтобы обеспечить правильную работу других классов. Все реализации, которые могут
быть созданы, должны быть окончательными, неизменяемыми и потокобезопасными.
По возможности рекомендуется использовать перечисление.

******* МЕТОДЫ ********

- <R extends Temporal> R addTo(R temporal, long amount) - Возвращает копию
  указанного временного объекта с добавленным указанным периодом.

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

- long between(Temporal temporal1Inclusive, Temporal temporal2Exclusive) -
  Вычисляет количество времени между двумя темпоральными объектами.

  Метод вычисляет количество времени между двумя темпоральными объектами.
  Вычисляется сумма с точки зрения этой единицы. Начальная и конечная точки
  предоставляются как временные объекты и должны быть совместимых типов.
  Реализация преобразует второй тип в экземпляр первого типа перед вычислением
  суммы. Результат будет отрицательным, если конец предшествует началу.

  Например, количество часов между двумя временными объектами можно рассчитать
  с помощью HOURS.between(startTime, endTime).

  Вычисление возвращает целое число, представляющее количество полных единиц
  между двумя темпоральными временами. Например, количество часов между 11:30
  и 13:29 будет составлять только один час, так как на одну минуту меньше
  двух часов.

  Есть два эквивалентных способа использования этого метода. Первый заключается
  в непосредственном вызове этого метода. Второй — использовать Temporal.until
  (Temporal, TemporalUnit):
  ------------------------------------------------------------------------------
       // в данном случае строки эквивалентны
       between = thisUnit.between(start, end);
       between = start.until(end, thisUnit);
  ------------------------------------------------------------------------------

  Выбор следует делать исходя из того, что делает код более читабельным.
  Например, этот метод позволяет рассчитать количество дней между двумя датами:
  ------------------------------------------------------------------------------
    long daysBetween = DAYS.between(start, end);
    // или так
    long daysBetween = start.until(end, DAYS);
  ------------------------------------------------------------------------------

  Реализации должны выполнять любые запросы или вычисления, используя единицы
  измерения, доступные в ChronoUnit, или поля, доступные в ChronoField. Если
  устройство не поддерживается, должно быть сгенерировано исключение
  UnsupportedTemporalTypeException. Реализации не должны изменять указанные
  временные объекты.

  Требования к реализации: Реализации должны начинаться с проверки того, имеют
  ли два темпоральных объекта один и тот же тип, используя getClass(). Если нет,
  то результат должен быть получен вызовом -
  Temporal1Inclusive.until(temporal2Exclusive, this).

  Параметры:
  temporal1Inclusive - базовый темпоральный объект, не нуль;
  temporal2Exclusive - другой временный объект, не нулевой;
  Возвращает:
  Период времени между Temporal1Inclusive и Temporal2Exclusive с точки зрения выбранной
  единицы времени; положительное, если temporal2Exclusive позже, чем temporal1Inclusive,
  отрицательное, если раньше
  Исключения:
  - DateTimeException - если сумма не может быть рассчитана или конечное временное значение
  не может быть преобразовано в тот же тип, что и начальное временное значение.
  - UnsupportedTemporalTypeException - если блок не поддерживается темпоральным
  - ArithmeticException - если происходит числовое переполнение

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

- Duration getDuration() - Получает продолжительность этого модуля,
  которая может быть оценочной.

- boolean isDateBased() - Проверяет, представляет ли этот блок
  компонент даты.

- boolean isDurationEstimated() - Проверяет, является ли продолжительность
  блока оценкой.

- default boolean isSupportedBy(Temporal temporal) - Проверяет, поддерживается
  ли этот модуль указанным временным объектом.

- boolean isTimeBased() - Проверяет, представляет ли эта единица измерения
  компонент времени.

- String toString() - Получает описательное имя для модуля.

------------------------------------------------------------------------------------------
Более подробно см. https://docs.oracle.com/javase/8/docs/api/java/time/temporal/TemporalUnit.html
------------------------------------------------------------------------------------------