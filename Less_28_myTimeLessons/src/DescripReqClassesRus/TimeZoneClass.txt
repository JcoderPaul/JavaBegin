******* Class TimeZone - Класс TimeZone *******

public abstract class TimeZone extends Object
                               implements Serializable, Cloneable

TimeZone представляет смещение часового пояса, а также вычисляет летнее время.
Как правило, мы получаем TimeZone с помощью getDefault, который создает TimeZone
на основе часового пояса, в котором работает программа.

Например, для программы, работающей в Японии, getDefault создает объект TimeZone
на основе японского стандартного времени.

Мы также можем получить TimeZone, используя getTimeZone вместе с идентификатором
часового пояса. Например, идентификатор часового пояса для Тихоокеанского часового
пояса США — «America/Los_Angeles».

Итак, мы можем получить объект U.S. Pacific Time TimeZone с помощью:
------------------------------------------------------------------------------------
 TimeZone tz = TimeZone.getTimeZone("America/Los_Angeles");
------------------------------------------------------------------------------------

Мы можем использовать метод getAvailableIDs для перебора всех поддерживаемых
идентификаторов часовых поясов. Затем мы можем выбрать поддерживаемый идентификатор,
чтобы получить часовой пояс. Если нужный часовой пояс не представлен ни одним из
поддерживаемых идентификаторов, то для создания TimeZone можно указать собственный
идентификатор часового пояса.

Синтаксис пользовательского идентификатора часового пояса:
------------------------------------------------------------------------------------
CustomID:
         GMT Sign Hours : Minutes
         GMT Sign Hours Minutes
         GMT Sign Hours
 Sign: one of + -
 Hours:  Digit
         Digit Digit
 Minutes:
         Digit Digit
 Digit: one of
         0 1 2 3 4 5 6 7 8 9
------------------------------------------------------------------------------------

Часы должны быть в диапазоне от 0 до 23, а минуты — в диапазоне от 00 до 59.
Например, «GMT+10» и «GMT+0010» означают, что на десять часов и десять минут
опережает время по Гринвичу соответственно.

Формат не зависит от локали, и цифры должны быть взяты из блока базовой латиницы
стандарта Unicode. Нельзя указать расписание перехода на летнее время с пользовательским
идентификатором часового пояса. Если указанная строка не соответствует синтаксису,
используется "GMT".

При создании часового пояса указанный идентификатор пользовательского часового пояса
нормализуется в следующем синтаксисе:
------------------------------------------------------------------------------------
NormalizedCustomID:
         GMT Sign TwoDigitHours : Minutes
 Sign: one of
         + -
 TwoDigitHours:
         Digit Digit
 Minutes:
         Digit Digit
 Digit: one of
         0 1 2 3 4 5 6 7 8 9
------------------------------------------------------------------------------------
Например, TimeZone.getTimeZone("GMT-8").getID() возвращает "GMT-08:00".

Трехбуквенный идентификатор часового пояса:
Для совместимости с JDK 1.1.x также поддерживаются некоторые другие трехбуквенные
идентификаторы часовых поясов (например, «PST», «CTT», «AST»). Однако их использование
не рекомендуется, поскольку одна и та же аббревиатура часто используется для нескольких
часовых поясов (например, «CST» может быть «центральным стандартным временем США»
и «стандартным временем Китая»), и тогда платформа Java может распознавать только
один из часовых поясов.

******* МЕТОДЫ *******

- Object clone() - Создает копию этого TimeZone.

- static String[] getAvailableIDs() - Получает все доступные поддерживаемые
  идентификаторы.

- static String[] getAvailableIDs(int rawOffset) - Получает доступные идентификаторы
  в соответствии с заданным смещением часового пояса в миллисекундах.

- static TimeZone getDefault() - Получает часовой пояс по умолчанию для этого хоста.

- String getDisplayName() - Возвращает длинное стандартное имя времени этого часового
  пояса, подходящее для представления пользователю в локали по умолчанию.

- String getDisplayName(boolean daylight, int style) - Возвращает имя в указанном стиле
  этого часового пояса, подходящее для представления пользователю в локали по умолчанию.

- String getDisplayName(boolean daylight, int style, Locale locale) - Возвращает имя в
  указанном стиле этого часового пояса, подходящее для представления пользователю в
  указанной локали.

- String getDisplayName(Locale locale) - Возвращает длинное стандартное имя времени
  этого часового пояса, подходящее для представления пользователю в указанной локали.

- int getDSTSavings() - Возвращает количество времени, которое необходимо добавить к
  местному стандартному времени, чтобы получить местное время настенных часов.

- String getID() - Получает идентификатор этого часового пояса.

- abstract int getOffset(int era, int year, int month, int day, int dayOfWeek, int milliseconds) -
  Получает смещение часового пояса для текущей даты, измененное в случае перехода на летнее время.

- int getOffset(long date) - Возвращает смещение этого часового пояса от UTC на указанную дату.
  Если в указанную дату действует переход на летнее время, значение смещения корректируется с
  учетом перехода на летнее время. Этот метод возвращает исторически правильное значение смещения,
  если базовый подкласс реализации TimeZone поддерживает историческое расписание перехода на
  летнее время и изменения смещения по Гринвичу.

  Параметр: date- дата в миллисекундах с 00:00:00 GMT 1 января 1970 г.
  Возвращает: количество времени в миллисекундах, которое нужно добавить к временной зоне UTC,
  чтобы получить местное время.

- abstract int getRawOffset() - Возвращает количество времени в миллисекундах, которое нужно
  добавить к UTC, чтобы получить стандартное время в этом часовом поясе.

- static TimeZone getTimeZone(String ID) - Получает часовой пояс для данного идентификатора.

- boolean hasSameRules(TimeZone other) - Возвращает true, если эта зона имеет то же правило и
  смещение, что и другая зона.

- abstract boolean inDaylightTime(Date date) - Запрашивает, находится ли заданная дата в летнем
  времени в этом часовом поясе.

- boolean observesDaylightTime() - Возвращает true, если этот часовой пояс в настоящее время
  находится на летнем времени или если переход со стандартного времени на летнее время
  произойдет в любое время в будущем.

- static void setDefault(TimeZone zone) - Задает часовой пояс, возвращаемый методом getDefault.

- void setID(String ID) - Устанавливает идентификатор часового пояса.

- abstract void	setRawOffset(int offsetMillis) - Устанавливает смещение базового часового
  пояса по Гринвичу.

- abstract boolean useDaylightTime() - Запрашивает, использует ли этот часовой пояс летнее время.

----------------------------------------------------------------------------------------------------
Более подробно см. https://docs.oracle.com/javase/7/docs/api/java/util/TimeZone.html
----------------------------------------------------------------------------------------------------