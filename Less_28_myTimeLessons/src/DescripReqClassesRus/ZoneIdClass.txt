******* Class ZoneId - Класс ZoneId *******

public abstract class ZoneId extends Object
                             implements Serializable

Идентификатор часового пояса, выглядит например так - "Europe/Paris".
ZoneId используется для идентификации правил, используемых для преобразования
между Instant и LocalDateTime. Существует два различных типа идентификаторов:

- Фиксированные смещения — полностью разрешенное смещение от UTC/Greenwich, которое
  использует одно и то же смещение для всех локальных дат и времени.
- Географические регионы — область, в которой применяется определенный набор правил
  для определения смещения от UTC/Greenwich.

Большинство фиксированных смещений представлены ZoneOffset. Вызов normalized() для
любого ZoneId гарантирует, что идентификатор фиксированного смещения будет представлен
как ZoneOffset.

Фактические правила, описывающие, когда и как изменяется смещение, определяются ZoneRules.
Этот класс представляет собой просто идентификатор, используемый для получения базовых
правил. Этот подход используется, потому что правила определяются правительствами и часто
меняются, тогда как ID является стабильным.

Различие имеет и другие последствия. Сериализация ZoneId будет отправлять только идентификатор,
тогда как сериализация правил отправляет весь набор данных. Точно так же при сравнении двух
идентификаторов проверяется только идентификатор, тогда как при сравнении двух правил проверяется
весь набор данных.

Идентификаторы часовых поясов в системе. Существует три типа идентификаторов:
- Самый простой тип идентификатора — это ZoneOffset. Он состоит из «Z» и идентификаторов,
  начинающихся с «+» или «-».
- Следующий тип идентификаторов — это идентификаторы в стиле смещения с некоторой формой
  префикса, например «GMT+2» или «UTC+01:00». Распознаются префиксы «UTC», «GMT» и «UT».
  Смещение является суффиксом и будет нормализовано во время создания. Эти идентификаторы
  могут быть нормализованы до ZoneOffset с помощью normalized().
- Третий тип идентификаторов — идентификаторы на основе региона. Идентификатор региона должен
  состоять из двух или более символов и не должен начинаться с «UTC», «GMT», «UT», «+» или «-».
  Идентификаторы на основе региона определяются конфигурацией, см. ZoneRulesProvider.
  Конфигурация фокусируется на предоставлении поиска от идентификатора к базовым ZoneRules.

Правила часовых поясов определяются правительствами и часто меняются. Существует ряд организаций,
известных здесь как группы, которые отслеживают изменения часовых поясов и сопоставляют их. Группой
по умолчанию является База данных часовых поясов IANA (TZDB). Другие организации включают IATA
(орган авиационной отрасли) и Microsoft.

Каждая группа определяет свой собственный формат идентификатора региона, который она предоставляет.
Группа TZDB определяет такие идентификаторы, как «Европа/Лондон» или «Америка/Нью-Йорк».
Идентификаторы TZDB имеют приоритет над другими группами.

Во избежание конфликтов настоятельно рекомендуется включать имя группы во все идентификаторы,
предоставленные группами, отличными от TZDB. Например, идентификаторы региона часового пояса
авиакомпании IATA обычно совпадают с трехбуквенным кодом аэропорта. Однако аэропорт Утрехта
имеет код «UTC», что явно является конфликтом. Рекомендуемый формат для идентификаторов регионов
из групп, отличных от TZDB, — «группа~регион». Таким образом, если бы данные IATA были определены,
аэропорт Утрехта был бы «IATA~UTC».

Сериализация:
Этот класс может быть сериализован и хранит идентификатор зоны строки во внешней форме.
Подкласс ZoneOffset использует специальный формат, в котором хранится только смещение
от UTC/Greenwich.

ZoneId может быть десериализован в среде выполнения Java, если идентификатор неизвестен.
Например, если среда выполнения Java на стороне сервера была обновлена с новым
идентификатором зоны, но среда выполнения Java на стороне клиента не была обновлена.
В этом случае объект ZoneId будет существовать и может быть запрошен с помощью:
getId, equals, hashCode, toString, getDisplayName и нормализован.

Однако любой вызов getRules завершится с ошибкой ZoneRulesException. Этот подход позволяет
загружать и запрашивать ZonedDateTime, но не изменять его в среде выполнения Java с неполной
информацией о часовом поясе.

Для сравнения объектов класса следует использовать метод equals.

Требования разработчиков к реализации:
Этот абстрактный класс имеет две реализации, обе являются неизменяемыми и потокобезопасными.
Одна реализация моделирует идентификаторы на основе региона, другая — ZoneOffset, моделирующая
идентификаторы на основе смещения. Эта разница видна в сериализации.

******* МЕТОДЫ *******

- boolean equals(Object obj) - Проверяет, равен ли этот идентификатор часового пояса
  другому идентификатору часового пояса.

- static ZoneId	from(TemporalAccessor temporal) - Получает экземпляр ZoneId из
  временного объекта.

- static Set<String> getAvailableZoneIds() - Получает набор доступных идентификаторов зон.

- String getDisplayName(TextStyle style, Locale locale) - Получает текстовое представление
  зоны, например «британское время» или «+02:00».

- abstract String getId() - Получает уникальный идентификатор часового пояса.

- abstract ZoneRules getRules() - Получает правила часового пояса для этого идентификатора,
  позволяющие выполнять вычисления.

- int hashCode() - Хэш-код для этого идентификатора часового пояса.

- ZoneId normalized() - Нормализует идентификатор часового пояса, по возможности
  возвращая ZoneOffset.

- static ZoneId	of(String zoneId) - Получает экземпляр ZoneId из идентификатора,
  гарантируя, что идентификатор действителен и доступен для использования.

- static ZoneId	of(String zoneId, Map<String,String> aliasMap) - Получает экземпляр ZoneId,
  используя его идентификатор, используя карту псевдонимов в дополнение к стандартным
  идентификаторам зоны.

- static ZoneId	ofOffset(String prefix, ZoneOffset offset) - Получает экземпляр ZoneId,
  упаковывающий смещение.

- static ZoneId	systemDefault() - Получает системный часовой пояс по умолчанию.

- String toString() - Выводит эту зону как строку, используя идентификатор.

-----------------------------------------------------------------------------------------------------
Более подробно см. https://docs.oracle.com/javase/8/docs/api/java/time/ZoneId.html
-----------------------------------------------------------------------------------------------------