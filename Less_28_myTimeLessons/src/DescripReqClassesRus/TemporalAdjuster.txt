******* Interface TemporalAdjuster - Интерфейс регулирования времени *******

Это функциональный интерфейс, поэтому его можно использовать в качестве цели
назначения для лямбда-выражения или ссылки на метод.

@FunctionalInterface
public interface TemporalAdjuster

Стратегия настройки временного объекта.
Настройщики являются ключевым инструментом для изменения темпоральных объектов.
Они существуют для того, чтобы воплотить в жизнь процесс корректировки, допуская
различные подходы в соответствии с шаблоном разработки стратегии. Примерами могут
быть регуляторы, устанавливающие дату без выходных, или регуляторы, устанавливающие
дату на последний день месяца.

Существует два эквивалентных способа использования TemporalAdjuster:
- Первый - заключается в непосредственном вызове метода в этом интерфейсе.
- Второй - использовать Temporal.with(TemporalAdjuster):
----------------------------------------------------------------------------------
   // данные строки эквивалентны, однако...
   temporal = thisAdjuster.adjustInto(temporal);
   // рекомендуется использовать второй вариант, т.е. этот
   temporal = temporal.with(thisAdjuster);
----------------------------------------------------------------------------------

Рекомендуется использовать второй подход с (TemporalAdjuster), так как его гораздо
понятнее читать в коде.

Класс реализующий TemporalAdjusters содержит стандартный набор корректоров, доступных
в виде статических методов, которые включают:
- найти первый или последний день месяца;
- найти первый день следующего месяца;
- найти первый или последний день года;
- найти первый день следующего года;
- поиск первого или последнего дня недели в месяце, например "первая среда июня";
- поиск следующего или предыдущего дня недели, например "следующий четверг";

Данный интерфейс не накладывает ограничений на изменяемость реализаций, однако
неизменность настоятельно рекомендуется.

******* МЕТОД *******

- Temporal adjustInto(Temporal temporal) - Настраивает указанный временной объект.

Метод настраивает указанный временной объект, используя логику, инкапсулированную
в реализующем классе. Примерами могут быть регуляторы, устанавливающие дату без
выходных, или регуляторы, устанавливающие дату на последний день месяца.

Требования к реализации метода:
Реализация должна взять входной объект и настроить его. Реализация определяет
логику настройки и отвечает за документирование этой логики. Он может
использовать любой метод Temporal для запроса временного объекта и выполнения
настройки. Возвращаемый объект должен иметь тот же наблюдаемый тип, что и
входной объект.

Входной объект не должен изменяться. Вместо этого должна быть возвращена
скорректированная копия оригинала. Это обеспечивает эквивалентное безопасное
поведение для неизменяемых и изменяемых временных объектов.

Входной временной объект может находиться в календарной системе,
отличной от ISO. Реализации могут документировать совместимость с другими
календарными системами или отклонять временные объекты, отличные от ISO,
запрашивая хронологию.

Этот метод может быть вызван из нескольких потоков параллельно.
При вызове он должен быть потокобезопасным.

Параметры:
temporal - временной объект, чтобы настроить, не null
Возвращает:
Объект того же типа с внесенной корректировкой, не null
Исключения:
DateTimeException - если невозможно внести корректировку
ArithmeticException - если происходит числовое переполнение

-----------------------------------------------------------------------------
Более подробно см.
https://docs.oracle.com/javase/8/docs/api/java/time/temporal/TemporalAdjuster.html
-----------------------------------------------------------------------------
