******* Class Instant - Класс Instant *******

public final class Instant extends Object
                           implements Temporal,
                                      TemporalAdjuster,
                                      Comparable<Instant>,
                                      Serializable

Мгновенная точка на временной шкале.
Данный класс моделирует одну мгновенную точку на временной шкале.
Это может быть использовано для записи временных меток событий в
приложении.

Диапазон Instant требует хранения числа большего, чем Long. Для
этого класс хранит значение long, представляющее секунды эпохи,
и целое число, представляющее наносекунды секунды, которые всегда
будут находиться в диапазоне от 0 до 999 999 999. Секунды эпохи
отсчитываются от стандартной эпохи Java 1970-01-01T00:00:00Z, где
моменты после эпохи имеют положительные значения, а более ранние
моменты имеют отрицательные значения. Как для секунд эпохи, так и
для наносекунд большее значение всегда находится позже на временной
шкале, чем меньшее значение.

******* Шкала времени *******

Продолжительность солнечного дня — это стандартный способ, которым люди
измеряют время. Традиционно он делится на 24 часа 60 минут 60 секунд,
что составляет 86400 секунд.

Современное хронометрирование основано на атомных часах, которые точно
определяют секунду в системе SI относительно переходов атома цезия.
Продолжительность секунды SI была определена как очень близкая к
86400-й доле дня.

К сожалению, по мере вращения Земли продолжительность суток меняется.
Кроме того, со временем средняя продолжительность дня становится длиннее,
поскольку Земля замедляется. В результате продолжительность солнечных
суток в 2012 г. чуть больше 86400 секунд SI. Фактическая продолжительность
любого данного дня и величина, на которую Земля замедляется, непредсказуемы
и могут быть определены только путем измерения.

Шкала времени UT1 фиксирует точную продолжительность дня, но доступна
только через некоторое время после завершения дня.

Шкала времени UTC является стандартным подходом к объединению всех
дополнительных долей секунды от UT1 в целые секунды, известные как
дополнительные секунды. Дополнительная секунда может быть добавлена
или удалена в зависимости от изменения вращения Земли. Таким образом,
UTC позволяет суткам иметь 86399 секунд SI или 86401 секунд SI, где
это необходимо, чтобы день оставался на одной линии с Солнцем.

Современная шкала времени UTC была введена в 1972 году, введя понятие
целых дополнительных секунд. Между 1958 и 1972 годами определение UTC
было сложным, с небольшими скачками доли секунды и изменениями длины
условной секунды. По состоянию на 2012 год ведутся дискуссии о том,
чтобы снова изменить определение UTC с возможностью удаления
дополнительных секунд или внесения других изменений.

Учитывая сложность точного хронометража, описанную выше, этот Java API
определяет свою собственную шкалу времени, Java Time-Scale.

Шкала времени Java делит каждый календарный день ровно на 86400 частей,
известных как секунды. Эти секунды могут отличаться от секунд SI. Она
точно соответствует де-факто международной шкале гражданского времени,
определение которой время от времени меняется.

Шкала времени Java имеет немного разные определения для разных сегментов
временной шкалы, каждое из которых основано на согласованной международной
шкале времени, которая используется в качестве основы для гражданского
времени. Всякий раз, когда согласованная на международном уровне шкала
времени изменяется или заменяется, для нее должен быть определен новый
сегмент шкалы времени Java.

Каждый сегмент должен соответствовать следующим требованиям:
- шкала времени JAVA должна точно соответствовать базовой международной
  шкале гражданского времени;
- шкала времени JAVA должна точно соответствовать международной гражданской
  шкале времени в полдень каждого дня;
- шкала времени JAVA должна иметь точно определенное отношение к международной
  гражданской шкале времени.

По состоянию на 2013 год, на шкале времени Java есть два сегмента:
- Для сегмента с 1972-11-03 (точная граница обсуждается ниже) до дальнейшего
  уведомления общепринятой международной шкалой времени является UTC
  (с дополнительными секундами). В этом сегменте шкала времени Java
  идентична UTC-SLS. Это идентично UTC в дни без дополнительной секунды.
  В дни, в которых есть дополнительная секунда, дополнительная секунда
  равномерно распределяется по последним 1000 секундам дня, сохраняя видимость
  ровно 86400 секунд в день.

- Для сегмента до 03 ноября 1972 г., простирающегося сколь угодно далеко назад,
  согласованная международная шкала времени определяется как UT1, применяемая
  пролептически (Пролептический григорианский календарь (предваряющий
  григорианский календарь, от др.-греч. πρόληψις «предвосхищение») — календарь,
  расширяющий григорианский календарь на период до его введения 15 октября 1582 года.),
  что эквивалентно (среднему) солнечному времени на нулевом меридиане (Гринвич).
  В этом сегменте шкала времени Java идентична согласованной международной шкале
  времени. Точная граница между двумя сегментами — это момент, когда UT1 = UTC
  между 1972-11-03T00:00 и 1972-11-04T12:00.

Реализации шкалы времени Java с использованием API JSR-310 не обязаны предоставлять
какие-либо часы с точностью до доли секунды или которые идут монотонно или плавно.
Таким образом, от реализаций не требуется фактически выполнять поворот UTC-SLS или
иным образом знать о секундах координации. Однако JSR-310 требует, чтобы реализации
документировали подход, который они используют при определении часов, представляющих
текущий момент.
-------------------------------------------------------------------------------------
Подробную информацию о доступных часах см. в разделе Часы:
- https://docs.oracle.com/javase/8/docs/api/java/time/Clock.html
-------------------------------------------------------------------------------------

Шкала времени Java используется для всех классов даты и времени. Сюда входят:
- Instant,
- LocalDate,
- LocalTime,
- OffsetDateTime,
- ZonedDateTime,
- Duration.

Для сравнения объектов класса следует использовать метод equals.
Класс Instant является неизменяемым и потокобезопасным.

******* МЕТОДЫ *******

- Temporal adjustInto(Temporal temporal) - Настраивает указанный временной объект,
  чтобы иметь этот момент.

- OffsetDateTime atOffset(ZoneOffset offset) - Объединяет этот момент со смещением
  для создания OffsetDateTime.

- ZonedDateTime	atZone(ZoneId zone) - Объединяет этот момент с часовым поясом для
  создания ZonedDateTime.

- int compareTo(Instant otherInstant) - Сравнивает этот момент с указанным моментом.

- boolean equals(Object otherInstant) - Проверяет, равен ли этот момент указанному моменту.

- static Instant from(TemporalAccessor temporal) - Получает экземпляр Instant из
  временного объекта.

- int get(TemporalField field) - Получает значение указанного поля из этого момента
  как целое число.

- long getEpochSecond() - Получает количество секунд из эпохи Java 1970-01-01T00:00:00Z.

- long getLong(TemporalField field) - Получает значение указанного поля с этого
  момента как long.

- int getNano() - Получает количество наносекунд позже по временной шкале
  от начала секунды.

- int hashCode() - Возвращает хэш-код для этого момента.

- boolean isAfter(Instant otherInstant) - Проверяет, является ли этот момент после
  указанного момента.

- boolean isBefore(Instant otherInstant) - Проверяет, предшествует ли этот момент
  времени указанному моменту.

- boolean isSupported(TemporalField field) - Проверяет, поддерживается ли указанное поле.

- boolean isSupported(TemporalUnit unit) - Проверяет, поддерживается ли указанный модуль.

- Instant minus(long amountToSubtract, TemporalUnit unit) - Возвращает копию этого момента
  с вычитанием указанной суммы.

- Instant minus(TemporalAmount amountToSubtract) - Возвращает копию этого момента с
  вычитанием указанной суммы.

- Instant minusMillis(long millisToSubtract) - Возвращает копию этого момента с вычитанием
  указанной длительности в миллисекундах.

- Instant minusNanos(long nanosToSubtract) - Возвращает копию этого момента с вычитанием
  указанной продолжительности в наносекундах.

- Instant minusSeconds(long secondsToSubtract) - Возвращает копию этого момента с
  вычитанием указанной продолжительности в секундах.

- static Instant now() - Получает текущий момент от системных часов.

- static Instant now(Clock clock) - Получает текущий момент от указанных часов.

- static Instant ofEpochMilli(long epochMilli) - Получает экземпляр Instant, используя
  миллисекунды из эпохи 1970-01-01T00:00:00Z.

- static Instant ofEpochSecond(long epochSecond) - Получает экземпляр Instant, используя
  секунды из эпохи 1970-01-01T00:00:00Z.

- static Instant ofEpochSecond(long epochSecond, long nanoAdjustment) - Получает экземпляр
  Instant, используя секунды из эпохи 1970-01-01T00:00:00Z и наносекундные доли секунды.

- static Instant parse(CharSequence text) - Получает экземпляр Instant из текстовой
  строки, например 2007-12-03T10:15:30.00Z.

- Instant plus(long amountToAdd, TemporalUnit unit) - Возвращает копию этого момента
  с указанной добавленной суммой.

- Instant plus(TemporalAmount amountToAdd) - Возвращает копию этого момента
  с указанной добавленной суммой.

- Instant plusMillis(long millisToAdd) - Возвращает копию этого момента
  с добавленной продолжительностью в миллисекундах.

- Instant plusNanos(long nanosToAdd) - Возвращает копию этого момента с указанной
  продолжительностью в добавленных наносекундах.

- Instant plusSeconds(long secondsToAdd) - Возвращает копию этого момента с
  добавленной продолжительностью в секундах.

- <R> R	query(TemporalQuery<R> query) - Запрашивает этот момент, используя
  указанный запрос.

- ValueRange range(TemporalField field) - Получает диапазон допустимых значений
  для указанного поля.

- long toEpochMilli() - Преобразует этот момент в количество миллисекунд
  эпохи 1970-01-01T00:00:00Z.

- String toString() - Строковое представление этого момента с использованием
  представления ISO-8601.

- Instant truncatedTo(TemporalUnit unit) - Возвращает копию этого Instant,
  усеченную до указанного модуля.

- long until(Temporal endExclusive, TemporalUnit unit) - Вычисляет количество
  времени до другого момента с точки зрения указанной единицы.

- Instant with(TemporalAdjuster adjuster) - Возвращает скорректированную копию этого момента.

- Instant with(TemporalField field, long newValue) - Возвращает копию этого момента с
  указанным полем, установленным на новое значение.

---------------------------------------------------------------------------------------------
Более подробно см. https://docs.oracle.com/javase/8/docs/api/java/time/Instant.html
---------------------------------------------------------------------------------------------
