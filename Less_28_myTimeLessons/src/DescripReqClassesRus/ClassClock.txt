******* Class Clock - Класс Clock *******

public abstract class Clock extends Object

Класс Clock, обеспечивающие доступ к текущему моменту, дате и времени с
использованием часового пояса. Экземпляры этого класса используются для
поиска текущего момента, который можно интерпретировать, используя
сохраненный часовой пояс, чтобы найти текущую дату и время.

Таким образом, вместо System.currentTimeMillis() и TimeZone.getDefault()
можно использовать часы.

Использование часов не является обязательным. Все ключевые классы даты и
времени также имеют фабричный метод now(), который использует системные
часы в часовом поясе по умолчанию.

Основная цель этой абстракции — разрешить подключение альтернативных часов
по мере необходимости. Приложения используют объект для получения текущего
времени, а не статический метод. Это может упростить тестирование.

Лучшей практикой для приложений является передача Clock в любой метод,
требующий текущего момента.

Инфраструктура внедрения зависимостей — один из способов добиться этого:
----------------------------------------------------------------------------
 public class MyBean {
    private Clock clock;  // dependency inject
    ...
    public void process(LocalDate eventDate) {
      if (eventDate.isBefore(LocalDate.now(clock)) {
        ...
      }
    }
  }
----------------------------------------------------------------------------

Этот подход позволяет использовать во время тестирования альтернативные часы,
такие как фиксированные или смещенные.

Фабричные методы системы обеспечивают часы на основе лучших доступных системных
часов. Это может использовать System.currentTimeMillis() или часы с более высоким
разрешением, если они доступны.

Требования разработчиков к реализации:
Этот абстрактный класс должен быть реализован с осторожностью, чтобы обеспечить
правильную работу других классов. Все реализации, которые могут быть созданы,
должны быть окончательными, неизменяемыми и потокобезопасными.

Основные методы определены, чтобы разрешить создание исключения. При обычном
использовании исключений не будет, однако одной из возможных реализаций будет
получение времени с центрального сервера времени по сети. Очевидно, что в этом
случае поиск может завершиться ошибкой, поэтому методу разрешено генерировать
исключение.

Мгновения, возвращаемые из Clock, работают по шкале времени, которая игнорирует
високосные секунды, как описано в Instant. Если реализация заключает в себе
источник, предоставляющий информацию о дополнительной секунде, то следует
использовать механизм для «сглаживания» дополнительной секунды. Шкала времени
Java требует использования UTC-SLS, однако реализации часов могут выбирать,
насколько они точны со шкалой времени, если они документируют, как они работают.
Таким образом, от реализаций не требуется фактически выполнять поворот UTC-SLS
или иным образом знать о секундах координации.

Реализации должны реализовывать Serializable везде, где это возможно, и должны
документировать, поддерживают ли они сериализацию.

Примечание для реализации:
Представленная здесь реализация часов основана на System.currentTimeMillis().
Этот метод практически не гарантирует точность часов. Приложения, требующие
более точных часов, должны сами реализовать этот абстрактный класс, используя
другие внешние часы, например NTP-сервер.

******* МЕТОДЫ *******

- boolean equals(Object obj) - Проверяет, равны ли вызывающие метод часы другим часам.

- static Clock fixed(Instant fixedInstant, ZoneId zone) - Получает часы,
  которые всегда возвращают одно и то же мгновение.

- abstract ZoneId getZone() - Получает часовой пояс, используемый для
  создания даты и времени.

- int hashCode() - Хэш-код для вызывающих метод часов.

- abstract Instant instant() - Получает текущий момент часов.

- long millis() - Получает текущий миллисекундный момент часов.

- static Clock offset(Clock baseClock, Duration offsetDuration) - Получает
  часы, которые возвращают мгновения из указанных часов с добавлением
  указанной длительности.

- static Clock system(ZoneId zone) - Получает часы, которые возвращают
  текущий момент времени, используя наилучшие доступные системные часы.

- static Clock systemDefaultZone() -Получает часы, которые возвращают
  текущий момент времени, используя наилучшие из доступных системных
  часов, преобразуя дату и время с использованием часового пояса по
  умолчанию.

- static Clock systemUTC() - Получает часы, которые возвращают текущий
  момент времени, используя наилучшие из доступных системных часов,
  преобразуя дату и время в часовой пояс UTC.

- static Clock tick(Clock baseClock, Duration tickDuration) - Получает
  часы, которые возвращают моменты из указанных часов, усеченные до
  ближайшего вхождения указанной длительности.

- static Clock tickMinutes(ZoneId zone) - Получает часы, которые
  возвращают текущий мгновенный отсчет в целых минутах, используя
  наилучшие доступные системные часы.

- static Clock tickSeconds(ZoneId zone) - Получает часы, которые
  возвращают текущий мгновенный отсчет в целых секундах, используя
  наилучшие доступные системные часы.

- abstract Clock withZone(ZoneId zone) - Возвращает копию вызывающих метод
  часов с другим часовым поясом.

----------------------------------------------------------------------------
Более подробно см. https://docs.oracle.com/javase/8/docs/api/java/time/Clock.html
----------------------------------------------------------------------------