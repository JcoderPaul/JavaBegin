package Less_24_myFirstInitializationBlock;
/*
Последовательность инициализации блоков и переменных:
1. Статические блоки и переменные родительского класса
2. Статические блоки и переменные дочернего класса
3. Не статические блоки и переменные родительского класса
4. Конструктор родительского класса
5. Не статические блоки и переменные дочернего класса
6. Конструктор дочернего класса
Инициализация с пункта 3 по 6 происходит только при создании каждого нового объекта.
*/
public class myFirstInitializationBlock_Less_4 {
    // Первыми срабатывают по порядку статические методы
    static {
        System.out.print("Шаг - 1 -> ");
        magic(2);}
    static void magic(int a){ System.out.println(a + " "); }
    // Конструктор включается в работу после всех блоков инициализации
    myFirstInitializationBlock_Less_4(){
        System.out.print("Шаг 6 -> Сработал конструктор и метод-> ");
        magic(5);
    }
    static {
        System.out.print("Шаг - 2 -> ");
        magic(4);}
    // Этот блок инициализации идет первым после статических блоков, поэтому и (4)
    {   System.out.print("Шаг - 4 -> ");
        magic(6);}
    /*
    Данный статический метод последний в цепочке себе подобных и значит они больше
    не сработают, следующими идут обычные статические методы и тоже по порядку следования
    в коде класса...
    */
    static {
        System.out.println("Шаг - 3 -> ");
        new myFirstInitializationBlock_Less_4();}

    {   System.out.print("Шаг - 5 -> ");
        magic(15);}

    public static void main(String[] args) {
        // Ну и наконец основной метод класса, который запустил всю эту цепочку
        System.out.println("Шаг 7 - Метод MAIN");
    }
}
