package Less_10_myStringMethod;
/*
Задача вывести в консоль название почтовых серверов из строки email-ов
*/
public class Less_10_Part_10_ServerExtract {

    public static void main(String[] args) {
        String str_1 = "ya@yahoo.com; on@gmail.com; ona@yandex.ru; oni@mail.ru;";
        emailExtractor(str_1);
    }

    public static void emailExtractor(String str_1){
        int a = 0; // Сюда мы будем помещать индекс символа '@'
        int b = 0; // Сюда мы будем помещать индекс символа '.'
        int c = 0; // Сюда мы будем помещать индекс символа ';'
        // Цикл будет работать пока не закончатся символы введенной для обработки строки
        while (c < (str_1.length() - 1)){
            /*
            На первом этапе с = 0 и поиск соответствующих индексов, нужных нам символов
            начинается с начала строки. Находим первый символ "@" и меняем значение 'а',
            далее находим "." и меняем значение 'b', наконец находим ";" и увеличиваем
            значение на '+1'. Если не увеличить 'с + 1', а в новой итерации цикла это стартовый
            индекс для поиска символов, то мы получим бесконечный цикл, который зависнет
            на значении первой найденной 'точки с запятой' - ';'
            */

            a = str_1.indexOf("@", c);
            b = str_1.indexOf(".", c);
            c = str_1.indexOf(";", c);
            /*
            Выводим в консоль n-ю найденную подстроку, начиная со значения а + 1, т.к.
            метод *.substring(int_1, int_2), выводит подстроку начиная с первого символа,
            но не отображает последний, т.е. для получения 'yahoo', например:

            y a @ y a h o o . c o  m
            0 1 2 3 4 5 6 7 8 9 10 11

            нам понадобится 3 или (2 + 1) index и конечно 8-ой, символ которого не будет выводиться
            в итоге в консоли появится -> yahoo
            */
            System.out.println(str_1.substring(a + 1, b));
            /*
            Как только мы нашли первый символ ';' мы зафиксировали значение 'с' и
            если не сместим его на +1, при следующей итерации мы снова его найдем и
            так до бесконечности.
            */
            c++;
        }
    }
}
